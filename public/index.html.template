<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Cognito Authentication Demo</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 20px;
        }
        
        .container {
            background: white;
            border-radius: 12px;
            box-shadow: 0 10px 40px rgba(0,0,0,0.2);
            width: 100%;
            max-width: 400px;
            padding: 40px;
        }
        
        h1 {
            color: #333;
            margin-bottom: 30px;
            text-align: center;
            font-size: 24px;
        }
        
        .form-group {
            margin-bottom: 20px;
        }
        
        label {
            display: block;
            color: #555;
            font-size: 14px;
            margin-bottom: 5px;
            font-weight: 500;
        }
        
        input {
            width: 100%;
            padding: 12px;
            border: 1px solid #ddd;
            border-radius: 6px;
            font-size: 14px;
            transition: border-color 0.3s;
        }
        
        input:focus {
            outline: none;
            border-color: #667eea;
        }
        
        button {
            width: 100%;
            padding: 12px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            border-radius: 6px;
            font-size: 16px;
            font-weight: 500;
            cursor: pointer;
            transition: transform 0.2s;
        }
        
        button:hover {
            transform: translateY(-1px);
        }
        
        button:disabled {
            opacity: 0.6;
            cursor: not-allowed;
        }
        
        .message {
            padding: 12px;
            border-radius: 6px;
            margin-bottom: 20px;
            font-size: 14px;
        }
        
        .error {
            background: #fee;
            color: #c33;
            border: 1px solid #fcc;
        }
        
        .success {
            background: #efe;
            color: #3c3;
            border: 1px solid #cfc;
        }
        
        .info {
            background: #eef;
            color: #33c;
            border: 1px solid #ccf;
        }
        
        .hidden {
            display: none;
        }
        
        .tabs {
            display: flex;
            gap: 10px;
            margin-bottom: 30px;
        }
        
        .tab {
            flex: 1;
            padding: 10px;
            background: #f5f5f5;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            transition: background 0.3s;
        }
        
        .tab.active {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
        }
        
        .user-info {
            background: #f9f9f9;
            padding: 20px;
            border-radius: 6px;
            margin-top: 20px;
        }
        
        .user-info h3 {
            color: #333;
            margin-bottom: 10px;
            font-size: 16px;
        }
        
        .user-info p {
            color: #666;
            font-size: 14px;
            margin-bottom: 5px;
            word-break: break-all;
        }
        
        .logout-btn {
            background: #666;
            margin-top: 10px;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>AWS Cognito Demo</h1>
        
        <div id="messageBox" class="message hidden"></div>
        
        <div id="authSection">
            <div class="tabs">
                <button class="tab active" onclick="switchTab('signin')">Sign In</button>
                <button class="tab" onclick="switchTab('newpassword')">New Password</button>
            </div>
            
            <form id="signinForm">
                <div class="form-group">
                    <label for="email">Email</label>
                    <input type="email" id="email" required placeholder="user@example.com">
                </div>
                <div class="form-group">
                    <label for="password">Password</label>
                    <input type="password" id="password" required placeholder="Enter your password">
                </div>
                <button type="submit">Sign In</button>
            </form>
            
            <form id="newPasswordForm" class="hidden">
                <div class="form-group">
                    <label for="newPassword">New Password</label>
                    <input type="password" id="newPassword" required placeholder="Min 12 chars, upper, lower, number, symbol">
                </div>
                <div class="form-group">
                    <label for="confirmPassword">Confirm Password</label>
                    <input type="password" id="confirmPassword" required placeholder="Re-enter your password">
                </div>
                <button type="submit">Change Password</button>
            </form>
            
            <form id="mfaForm" class="hidden">
                <div class="form-group">
                    <label for="mfaCode">MFA Code</label>
                    <input type="text" id="mfaCode" required placeholder="Enter 6-digit code" maxlength="6">
                </div>
                <button type="submit">Verify MFA</button>
            </form>
            
            <form id="mfaSetupForm" class="hidden">
                <div class="form-group">
                    <label>MFA Setup Required</label>
                    <p style="color: #666; font-size: 14px; margin: 10px 0;">Choose your preferred MFA method:</p>
                    <select id="mfaMethod" style="width: 100%; padding: 12px; border: 1px solid #ddd; border-radius: 6px; margin-bottom: 10px;">
                        <option value="SMS">SMS</option>
                        <option value="TOTP">Authenticator App (TOTP)</option>
                    </select>
                </div>
                <button type="submit">Setup MFA</button>
            </form>
        </div>
        
        <div id="userSection" class="hidden">
            <div class="user-info">
                <h3>Authenticated User</h3>
                <p><strong>Email:</strong> <span id="userEmail"></span></p>
                <p><strong>Session:</strong> Valid</p>
                <p><strong>Token Expires:</strong> <span id="tokenExpiry"></span></p>
            </div>
            <button class="logout-btn" onclick="signOut()">Sign Out</button>
        </div>
    </div>

    <script type="module">
        import { CognitoUserPool, CognitoUser, AuthenticationDetails } from 'https://unpkg.com/amazon-cognito-identity-js@6.3.0/dist/amazon-cognito-identity-js.esm.js';
        
        // SETUP INSTRUCTIONS:
        // 1. Copy this file: cp public/index.html.template public/index.html
        // 2. Run terraform to create infrastructure: cd terraform && terraform apply
        // 3. Get your values: terraform output
        // 4. Replace the placeholder values below with your actual values
        const cognitoConfig = {
            UserPoolId: 'YOUR_USER_POOL_ID',  // Get from: terraform output user_pool_id
            ClientId: 'YOUR_CLIENT_ID'         // Get from: terraform output client_id
        };
        
        const userPool = new CognitoUserPool({
            UserPoolId: cognitoConfig.UserPoolId,
            ClientId: cognitoConfig.ClientId
        });
        
        let currentUser = null;
        let newPasswordUser = null;
        
        window.switchTab = function(tab) {
            const tabs = document.querySelectorAll('.tab');
            const forms = document.querySelectorAll('form');
            
            tabs.forEach(t => t.classList.remove('active'));
            forms.forEach(f => f.classList.add('hidden'));
            
            if (tab === 'signin') {
                tabs[0].classList.add('active');
                document.getElementById('signinForm').classList.remove('hidden');
            } else if (tab === 'newpassword') {
                tabs[1].classList.add('active');
                document.getElementById('newPasswordForm').classList.remove('hidden');
            }
        };
        
        function showMessage(message, type = 'info') {
            const messageBox = document.getElementById('messageBox');
            messageBox.textContent = message;
            messageBox.className = `message ${type}`;
        }
        
        function hideMessage() {
            document.getElementById('messageBox').classList.add('hidden');
        }
        
        function showUserSection(email, session) {
            document.getElementById('authSection').classList.add('hidden');
            document.getElementById('userSection').classList.remove('hidden');
            document.getElementById('userEmail').textContent = email;
            
            const expiry = new Date(session.getAccessToken().getExpiration() * 1000);
            document.getElementById('tokenExpiry').textContent = expiry.toLocaleString();
        }
        
        function showAuthSection() {
            document.getElementById('authSection').classList.remove('hidden');
            document.getElementById('userSection').classList.add('hidden');
            switchTab('signin');
        }
        
        document.getElementById('signinForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            hideMessage();
            
            const email = document.getElementById('email').value;
            const password = document.getElementById('password').value;
            
            const authenticationDetails = new AuthenticationDetails({
                Username: email,
                Password: password
            });
            
            currentUser = new CognitoUser({
                Username: email,
                Pool: userPool
            });
            
            currentUser.authenticateUser(authenticationDetails, {
                onSuccess: (result) => {
                    showMessage('Authentication successful!', 'success');
                    showUserSection(email, result);
                },
                
                onFailure: (err) => {
                    showMessage(`Authentication failed: ${err.message}`, 'error');
                },
                
                newPasswordRequired: (userAttributes, requiredAttributes) => {
                    showMessage('New password required (first login)', 'info');
                    newPasswordUser = currentUser;
                    switchTab('newpassword');
                },
                
                mfaSetup: (challengeName, challengeParameters) => {
                    document.getElementById('signinForm').classList.add('hidden');
                    document.getElementById('mfaSetupForm').classList.remove('hidden');
                    showMessage('MFA setup required', 'info');
                },
                
                mfaRequired: (challengeName, challengeParameters) => {
                    document.getElementById('signinForm').classList.add('hidden');
                    document.getElementById('mfaForm').classList.remove('hidden');
                    showMessage('Enter your MFA code', 'info');
                },
                
                totpRequired: (challengeName, challengeParameters) => {
                    document.getElementById('signinForm').classList.add('hidden');
                    document.getElementById('mfaForm').classList.remove('hidden');
                    showMessage('Enter TOTP code from your authenticator app', 'info');
                }
            });
        });
        
        document.getElementById('newPasswordForm').addEventListener('submit', (e) => {
            e.preventDefault();
            hideMessage();
            
            const newPassword = document.getElementById('newPassword').value;
            const confirmPassword = document.getElementById('confirmPassword').value;
            
            if (newPassword !== confirmPassword) {
                showMessage('Passwords do not match', 'error');
                return;
            }
            
            if (!newPasswordUser) {
                showMessage('No password change session active', 'error');
                return;
            }
            
            newPasswordUser.completeNewPasswordChallenge(newPassword, {}, {
                onSuccess: (result) => {
                    showMessage('Password changed successfully!', 'success');
                    showUserSection(newPasswordUser.getUsername(), result);
                },
                onFailure: (err) => {
                    showMessage(`Password change failed: ${err.message}`, 'error');
                },
                mfaSetup: (challengeName, challengeParameters) => {
                    document.getElementById('newPasswordForm').classList.add('hidden');
                    document.getElementById('mfaSetupForm').classList.remove('hidden');
                    showMessage('MFA setup required', 'info');
                }
            });
        });
        
        document.getElementById('mfaForm').addEventListener('submit', (e) => {
            e.preventDefault();
            hideMessage();
            
            const mfaCode = document.getElementById('mfaCode').value;
            
            currentUser.sendMFACode(mfaCode, {
                onSuccess: (result) => {
                    showMessage('MFA verification successful!', 'success');
                    showUserSection(currentUser.getUsername(), result);
                },
                onFailure: (err) => {
                    showMessage(`MFA verification failed: ${err.message}`, 'error');
                }
            });
        });
        
        document.getElementById('mfaSetupForm').addEventListener('submit', (e) => {
            e.preventDefault();
            showMessage('MFA setup would be handled here. For full setup, use the Node.js scripts.', 'info');
        });
        
        window.signOut = function() {
            if (currentUser) {
                currentUser.signOut();
            }
            showMessage('Signed out successfully', 'success');
            showAuthSection();
            document.getElementById('email').value = '';
            document.getElementById('password').value = '';
        };
        
        const cognitoUser = userPool.getCurrentUser();
        if (cognitoUser) {
            cognitoUser.getSession((err, session) => {
                if (err) {
                    showAuthSection();
                } else if (session.isValid()) {
                    currentUser = cognitoUser;
                    showUserSection(cognitoUser.getUsername(), session);
                    showMessage('Session restored', 'success');
                } else {
                    showAuthSection();
                }
            });
        }
    </script>
</body>
</html>